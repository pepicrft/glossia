name: Release Dry Run

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - '*'
      - '!main'
  workflow_dispatch:

permissions:
  contents: read
  packages: read
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/web
  MISE_SOPS_AGE_KEY: ${{ secrets.MISE_SOPS_AGE_KEY }}

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      next_version: ${{ steps.check.outputs.next_version }}
      current_version: ${{ steps.check.outputs.current_version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - uses: jdx/mise-action@v2
          
      - name: Check version
        id: check
        run: |
          # Run mise task and capture output
          output=$(mise run release:check-version)
          
          # Parse output and set GitHub outputs
          while IFS='=' read -r key value; do
            echo "${key}=${value}" >> $GITHUB_OUTPUT
          done <<< "$output"
          
          # Display info
          echo "::notice title=Version Check::$(echo "$output" | grep -E 'should_release|next_version|bump_type')"
          
      - name: Generate changelog preview
        id: changelog
        if: steps.check.outputs.should_release == 'true'
        run: |
          echo "## Changelog Preview for ${{ steps.check.outputs.next_version }}" > CHANGELOG_PREVIEW.md
          echo "" >> CHANGELOG_PREVIEW.md
          git-cliff --unreleased --strip header >> CHANGELOG_PREVIEW.md
          
          # Output as multiline string
          {
            echo 'changelog<<EOF'
            cat CHANGELOG_PREVIEW.md
            echo EOF
          } >> $GITHUB_OUTPUT
          
          echo "::group::Changelog Preview"
          cat CHANGELOG_PREVIEW.md
          echo "::endgroup::"

  cli:
    needs: check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: jdx/mise-action@v2
          
      - name: Build test binaries
        run: |
          VERSION=${{ needs.check.outputs.next_version || 'dry-run' }}
          echo "::notice title=Build Test::Building CLI binaries with version ${VERSION}"
          
          # Build just a few platforms for testing
          mkdir -p test-release
          cd cli
          
          # Linux amd64
          GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -X github.com/glossia/glossia/cli/cmd.version=${VERSION}" \
            -o ../test-release/glossia-linux-amd64 ./main.go
            
          # Darwin arm64  
          GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w -X github.com/glossia/glossia/cli/cmd.version=${VERSION}" \
            -o ../test-release/glossia-darwin-arm64 ./main.go
            
          # Windows amd64
          GOOS=windows GOARCH=amd64 go build -ldflags="-s -w -X github.com/glossia/glossia/cli/cmd.version=${VERSION}" \
            -o ../test-release/glossia-windows-amd64.exe ./main.go
            
          cd ..
          echo "::notice title=Binaries Built::Test binaries created successfully"

  docker:
    needs: check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}},value=${{ needs.check.outputs.next_version || 'dry-run' }}
            type=raw,value=dry-run-${{ github.run_number }}
            
      - name: Build Docker image (dry run - no push)
        uses: docker/build-push-action@v5
        with:
          context: ./web
          platforms: linux/amd64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/image.tar
          
      - name: Inspect Docker image
        run: |
          docker load < /tmp/image.tar
          echo "::group::Docker Image Tags"
          echo "${{ steps.meta.outputs.tags }}"
          echo "::endgroup::"
          
          echo "::group::Docker Image Size"
          docker images --format "table {{.Repository}}:{{.Tag}}\t{{.Size}}" | grep glossia || true
          echo "::endgroup::"

  summary:
    needs: [check, cli, docker]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Release Dry Run Summary
        run: |
          echo "# 📋 Release Dry Run Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.check.outputs.should_release }}" == "true" ]; then
            echo "## ✅ Release would be triggered" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Current Version:** ${{ needs.check.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Next Version:** ${{ needs.check.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ -n "${{ needs.check.outputs.changelog }}" ]; then
              echo "## 📝 Changelog Preview" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "${{ needs.check.outputs.changelog }}" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "## ℹ️ No release would be triggered" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "No conventional commits found that warrant a release." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔨 Build Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.cli.result }}" == "success" ]; then
            echo "- ✅ CLI builds: Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ CLI builds: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.docker.result }}" == "success" ]; then
            echo "- ✅ Docker build: Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ Docker build: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*This was a dry run. No releases or tags were created.*" >> $GITHUB_STEP_SUMMARY