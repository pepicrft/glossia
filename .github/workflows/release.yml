name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  MISE_SOPS_AGE_KEY: ${{ secrets.MISE_SOPS_AGE_KEY }}

jobs:
  check:
    name: Check
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      next_version: ${{ steps.check.outputs.next_version }}
      current_version: ${{ steps.check.outputs.current_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: jdx/mise-action@v2

      - name: Check version
        id: check
        run: |
          # Run mise task and capture output
          output=$(mise run release:check-version)

          # Parse output and set GitHub outputs
          while IFS='=' read -r key value; do
            echo "${key}=${value}" >> $GITHUB_OUTPUT
          done <<< "$output"

  build-release:
    name: Build Release
    needs: check
    if: needs.check.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: jdx/mise-action@v2

      - name: Build CLI binaries
        run: |
          mise run release:build-cli-all "${{ needs.check.outputs.next_version }}" "release/binaries"

      - name: Create archives
        run: |
          mise run release:create-archives "${{ needs.check.outputs.next_version }}" "release/binaries" "release"

      - name: Generate checksums
        run: |
          mise run release:generate-checksums "release"

      - name: Sign files
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          MINISIGN_PRIVATE_KEY: ${{ secrets.MINISIGN_PRIVATE_KEY }}
          MINISIGN_PASSWORD: ${{ secrets.MINISIGN_PASSWORD }}
        run: |
          if [ -n "$GPG_PRIVATE_KEY" ] || [ -n "$MINISIGN_PRIVATE_KEY" ]; then
            mise run release:sign-files "release"
          else
            echo "::notice title=Signing Skipped::No signing keys configured. This is expected for external contributors."
          fi

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: release/
          retention-days: 1

  publish-release:
    name: Publish Release
    needs: [check, build-release, docker]
    if: needs.check.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: jdx/mise-action@v2

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Download release artifacts
        uses: actions/download-artifact@v5
        with:
          name: release-artifacts
          path: release/

      - name: Generate changelog
        run: |
          mise run release:generate-changelog "release/CHANGELOG.md" "${{ needs.check.outputs.next_version }}"

      - name: Create and push tag
        run: |
          git tag -a ${{ needs.check.outputs.next_version }} -m "Release ${{ needs.check.outputs.next_version }}"
          git push origin ${{ needs.check.outputs.next_version }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check.outputs.next_version }}
          files: |
            release/*.tar.gz
            release/*.zip
            release/*.sha256
            release/*.sig
            release/*.minisig
          body_path: release/CHANGELOG.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Docker
    needs: check
    if: needs.check.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.check.outputs.next_version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.check.outputs.next_version }}
            type=semver,pattern={{major}},value=${{ needs.check.outputs.next_version }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./web
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  edge:
    name: Edge
    needs: check
    if: needs.check.outputs.should_release == 'false' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=sha-
            type=raw,value=edge

      - name: Build and push Docker image (edge)
        uses: docker/build-push-action@v6
        with:
          context: ./web
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max