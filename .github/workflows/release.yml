name: Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/web

jobs:
  # ============================================================================
  # CONTINUOUS RELEASE - Determine if we need a new release from main branch
  # ============================================================================
  check:
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    env:
      MISE_SOPS_AGE_KEY: ${{ secrets.MISE_SOPS_AGE_KEY }}
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      next_version: ${{ steps.version.outputs.next_version }}
      current_version: ${{ steps.version.outputs.current_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - uses: jdx/mise-action@v2
          
      - name: Get current version
        id: version
        run: |
          # Get the latest tag
          CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          
          # Use git-cliff to determine if there are releasable changes
          git-cliff --unreleased --strip header > UNRELEASED.md
          
          # Check if there are any changes worth releasing
          if [ -s UNRELEASED.md ]; then
            # Analyze commits to determine version bump
            # Check for breaking changes
            if git log ${CURRENT_VERSION}..HEAD --grep="BREAKING CHANGE" --grep="!:" | grep -q .; then
              BUMP_TYPE="major"
            # Check for features
            elif git log ${CURRENT_VERSION}..HEAD --grep="^feat" --grep="^feature" | grep -q .; then
              BUMP_TYPE="minor"
            # Check for fixes
            elif git log ${CURRENT_VERSION}..HEAD --grep="^fix" --grep="^bugfix" | grep -q .; then
              BUMP_TYPE="patch"
            else
              BUMP_TYPE="none"
            fi
            
            if [ "$BUMP_TYPE" != "none" ]; then
              # Parse current version
              VERSION=${CURRENT_VERSION#v}
              MAJOR=$(echo $VERSION | cut -d. -f1)
              MINOR=$(echo $VERSION | cut -d. -f2)
              PATCH=$(echo $VERSION | cut -d. -f3)
              
              # Calculate next version
              case $BUMP_TYPE in
                major)
                  NEXT_VERSION="v$((MAJOR + 1)).0.0"
                  ;;
                minor)
                  NEXT_VERSION="v${MAJOR}.$((MINOR + 1)).0"
                  ;;
                patch)
                  NEXT_VERSION="v${MAJOR}.${MINOR}.$((PATCH + 1))"
                  ;;
              esac
              
              echo "next_version=${NEXT_VERSION}" >> $GITHUB_OUTPUT
              echo "Version bump type: $BUMP_TYPE"
              echo "Next version: $NEXT_VERSION"
            else
              echo "No conventional commits found that warrant a release"
              echo "next_version=" >> $GITHUB_OUTPUT
            fi
          else
            echo "No unreleased changes found"
            echo "next_version=" >> $GITHUB_OUTPUT
          fi
          
      - name: Check if should release
        id: check
        run: |
          if [ -n "${{ steps.version.outputs.next_version }}" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

  tag:
    needs: check
    if: needs.check.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Create and push tag
        run: |
          git tag -a ${{ needs.check.outputs.next_version }} -m "Release ${{ needs.check.outputs.next_version }}"
          git push origin ${{ needs.check.outputs.next_version }}
          echo "Tag created and pushed. Release build will be triggered automatically."

  # ============================================================================
  # TAGGED RELEASE - Build and publish all components when a tag is pushed
  # ============================================================================
  prepare:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Building release for version: ${VERSION}"

  cli:
    needs: prepare
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            suffix: ""
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            suffix: ""
          - os: ubuntu-latest
            goos: linux
            goarch: arm
            goarm: 7
            suffix: ""
          # macOS
          - os: macos-latest
            goos: darwin
            goarch: amd64
            suffix: ""
          - os: macos-latest
            goos: darwin
            goarch: arm64
            suffix: ""
          # Windows
          - os: windows-latest
            goos: windows
            goarch: amd64
            suffix: ".exe"
          - os: windows-latest
            goos: windows
            goarch: arm64
            suffix: ".exe"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'cli/go.mod'
          cache-dependency-path: 'cli/go.sum'
          
      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOARM: ${{ matrix.goarm }}
        run: |
          cd cli
          VERSION=${{ needs.prepare.outputs.version }}
          go build -ldflags="-s -w -X github.com/glossia/glossia/cli/cmd.version=${VERSION}" \
            -o glossia${{ matrix.suffix }} ./main.go
            
      - name: Create UBI-compliant archive name
        id: archive
        run: |
          VERSION=${{ needs.prepare.outputs.version }}
          VERSION_NO_V=${VERSION#v}
          
          # Build architecture string
          ARCH="${{ matrix.goarch }}"
          if [[ "${{ matrix.goarm }}" != "" ]]; then
            ARCH="${ARCH}v${{ matrix.goarm }}"
          fi
          
          # UBI naming: glossia-<arch>-<os>.tar.gz
          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            ARCHIVE_NAME="glossia-${ARCH}-pc-windows-msvc.tar.gz"
          elif [[ "${{ matrix.goos }}" == "darwin" ]]; then
            ARCHIVE_NAME="glossia-${ARCH}-apple-darwin.tar.gz"
          elif [[ "${{ matrix.goos }}" == "linux" ]]; then
            if [[ "${{ matrix.goarch }}" == "amd64" ]]; then
              ARCHIVE_NAME="glossia-x86_64-unknown-linux-gnu.tar.gz"
            elif [[ "${{ matrix.goarch }}" == "arm64" ]]; then
              ARCHIVE_NAME="glossia-aarch64-unknown-linux-gnu.tar.gz"
            elif [[ "${{ matrix.goarch }}" == "arm" ]]; then
              ARCHIVE_NAME="glossia-armv7-unknown-linux-gnueabihf.tar.gz"
            else
              ARCHIVE_NAME="glossia-${ARCH}-unknown-linux-gnu.tar.gz"
            fi
          else
            ARCHIVE_NAME="glossia-${ARCH}-${{ matrix.goos }}.tar.gz"
          fi
          
          echo "archive_name=${ARCHIVE_NAME}" >> $GITHUB_OUTPUT
          
      - name: Create archive
        run: |
          cd cli
          tar czf ../${{ steps.archive.outputs.archive_name }} glossia${{ matrix.suffix }}
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: glossia-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goarm }}
          path: ${{ steps.archive.outputs.archive_name }}

  docker:
    needs: prepare
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.prepare.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.prepare.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.prepare.outputs.version }}
            type=raw,value=latest
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./web
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    needs: [prepare, cli, docker]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    env:
      MISE_SOPS_AGE_KEY: ${{ secrets.MISE_SOPS_AGE_KEY }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Prepare release assets
        run: |
          mkdir -p release
          find artifacts -name "*.tar.gz" -exec mv {} release/ \;
          
      - uses: jdx/mise-action@v2
          
      - name: Install minisign
        run: |
          # Install minisign (not in mise.toml yet)
          wget -q https://github.com/jedisct1/minisign/releases/download/0.11/minisign-0.11-linux.tar.gz
          tar xzf minisign-0.11-linux.tar.gz
          sudo mv minisign-linux/x86_64/minisign /usr/local/bin/
          
      - name: Generate checksums
        run: |
          cd release
          sha256sum *.tar.gz > SHA256.txt
          sha512sum *.tar.gz > SHA512.txt
          
      - name: Import GPG key
        if: env.GPG_PRIVATE_KEY != ''
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          
      - name: Sign with GPG
        if: env.GPG_PRIVATE_KEY != ''
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          cd release
          for file in *.tar.gz SHA256.txt SHA512.txt; do
            gpg --batch --yes --detach-sign --armor --output "${file}.asc" "$file"
          done
          
      - name: Sign with minisign
        if: env.MINISIGN_PRIVATE_KEY != ''
        env:
          MINISIGN_PRIVATE_KEY: ${{ secrets.MINISIGN_PRIVATE_KEY }}
          MINISIGN_PASSWORD: ${{ secrets.MINISIGN_PASSWORD }}
        run: |
          cd release
          echo "$MINISIGN_PRIVATE_KEY" > ~/.minisign_key
          for file in *.tar.gz SHA256.txt SHA512.txt; do
            echo "$MINISIGN_PASSWORD" | minisign -S -s ~/.minisign_key -m "$file" -x "${file}.minisig"
          done
          rm ~/.minisign_key
          
      - name: Generate changelog
        run: |
          git-cliff --latest --strip header > release/CHANGELOG.md
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          body_path: release/CHANGELOG.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================================
  # EDGE BUILDS - Build development versions when no release is needed
  # ============================================================================
  edge:
    needs: check
    if: needs.check.outputs.should_release == 'false' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=sha-
            type=raw,value=edge
            
      - name: Build and push Docker image (edge)
        uses: docker/build-push-action@v5
        with:
          context: ./web
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max